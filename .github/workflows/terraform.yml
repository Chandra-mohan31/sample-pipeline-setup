name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up AWS credentials
      run: |
        export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        export AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}"

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -out saved_plan

    - name: Submit the plan to external service
      uses: jbergknoff/github-action-wait-for-terraform-plan-approval@v1
      id: submit_plan
      with:
        command: submit
    
        # The human-readable `terraform plan` output. ANSI color codes are okay (they will
        # be colorized when the plan is displayed for review.
        plan_contents: ${{steps.plan.outputs.stdout}}
    
        # (Optional) Overrides the URL of the external service. Defaults to the insecure,
        # underpowered https://terraform-plan-approval.herokuapp.com.
        #
        # See https://github.com/jbergknoff/terraform-plan-approval if you are interested
        # in running your own internal copy.
        external_service_url: https://terraform-plan-approval.bigcorp-internal.com

    - name: Wait for approval
      uses: jbergknoff/github-action-wait-for-terraform-plan-approval@v1
      with:
        command: wait
      
        # The plan id generated by the external service.
        plan_id: ${{steps.submit_plan.outputs.plan_id}}
      
        # (Optional) Overrides the URL of the external service. Defaults to the insecure,
        # underpowered https://terraform-plan-approval.herokuapp.com.
        #
        # See https://github.com/jbergknoff/terraform-plan-approval if you are interested
        # in running your own internal copy.
        external_service_url: https://terraform-plan-approval.bigcorp-internal.com
      
        # Give up waiting for approval/rejection after this many seconds. If the operation
        # times out and the plan is still pending, the action will `exit 1`, failing the build.
        # Default: 300 (5 minutes)
        timeout_seconds: 600
      
        # The interval (in seconds) at which we'll check the plan status.
        # Default: 5
        polling_period_seconds: 10

    #   # On push to "main", build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
