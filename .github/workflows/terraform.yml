name: 'Terraform'

on:
  push:
    branches: [ "main" , "dev" ]
  pull_request:
    branches: ["main" , "dev" ]

permissions:
  contents: read

jobs:
  terraform-dev:
    name: 'Terraform'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: dev

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up AWS credentials
      run: |
        export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        export AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}"

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init \
        -backend-config="bucket=sample-poc-pipeline-dev" \
        -backend-config="key=terraform.tfstate" \
        -backend-config="dynamodb_table=sample-pipeline-poc-lock-table-dev" \
        -backend=true \
        -get=true \
        -input=false


    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -out saved_plan

    - name: Terraform Apply
      id: apply
      run: terraform apply "saved_plan"

  terraform-prod:
    name: 'Terraform'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up AWS credentials
      run: |
        export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        export AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}"

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        terraform init \
        -migrate-state \
        -backend-config="bucket=sample-pipeline-poc-cm" \
        -backend-config="key=terraform.tfstate" \
        -backend-config="dynamodb_table=tf-state-lock-dynamodb-cm" \
        -backend=true \
        -get=true \
        -input=false 

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -out saved_plan

    - name: Terraform Apply
      id: apply
      run: terraform apply "saved_plan"

  terratest:
    name: 'Terra test'
    runs-on: 'ubuntu-latest'
    if: github.event_name == 'pull_request'
    environment: production # has to be dev, since the bucket and dynamo db table was created in prod env for time being having this 

  
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4


      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.0'

      - name: Test Go version
        run: go version

      - name: Set up AWS credentials
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}"
    
      - name: Execute Terra test
        run: |
          cd test
          go test -v -timeout 30m


